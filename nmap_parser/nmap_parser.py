# Nmap Parser by Jonathan Broche (@jobroche)
# This script parses an Nmap XML (targeted.xml) and saves open ports with their corresponding IPs into text files.

import os
import xml.etree.ElementTree as ET

# Function to parse all IPs and their open ports, then save IPs per port in text files
def parse_all_ips_with_ports(nmap_xml_file='targeted.xml', output_folder='ports'):
    try:
        tree = ET.parse(nmap_xml_file)
        root = tree.getroot()
    except ET.ParseError as e:
        print(f"Error parsing XML: {e}")
        return

    # Ensure output folder exists
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Check if the root has a namespace
    if '}' in root.tag:
        # Extract the namespace if present
        namespace = {'nmap': root.tag.split('}')[0].strip('{')}
    else:
        namespace = {}

    # Dictionary to track which IPs are associated with which ports
    port_ip_map = {}

    # Parse each host to find open ports and associate IPs with ports
    for host in root.findall(f".//{{{namespace.get('nmap', '')}}}host" if namespace else "host"):
        # Find the IP address (either IPv4 or IPv6)
        ip_address = None
        for addr in host.findall(f".//{{{namespace.get('nmap', '')}}}address" if namespace else "address"):
            if addr.get('addrtype') in ['ipv4', 'ipv6']:
                ip_address = addr.get('addr')
                break

        if not ip_address:
            print("No IP address found, skipping...")
            continue

        print(f"Found IP address: {ip_address}")

        # Parse open ports for this IP
        ports_section = host.find(f".//{{{namespace.get('nmap', '')}}}ports" if namespace else "ports")
        
        if ports_section is not None:
            print("Ports section found, analyzing ports...")
            for port in ports_section.findall(f".//{{{namespace.get('nmap', '')}}}port" if namespace else "port"):
                port_id = port.get('portid')
                protocol = port.get('protocol')
                state = port.find(f".//{{{namespace.get('nmap', '')}}}state" if namespace else "state").get('state')

                if state == 'open':
                    print(f"Open port found: {port_id}/{protocol}")

                    # Add this IP address to the list of IPs for this port
                    if port_id not in port_ip_map:
                        port_ip_map[port_id] = []
                    port_ip_map[port_id].append(ip_address)

        else:
            print("No ports section found for this host.")

    # Write the results to individual text files per port
    for port_id, ip_list in port_ip_map.items():
        port_filename = os.path.join(output_folder, f"{port_id}.txt")
        with open(port_filename, 'w') as f:
            for ip in ip_list:
                f.write(f"{ip}\n")

    print(f"Organized Nmap results saved to: {output_folder}")

# Default usage with preferred values
nmap_xml_file = 'targeted.xml'  # Path to your Nmap XML file
output_folder = 'ports'  # Output folder to store the results

parse_all_ips_with_ports(nmap_xml_file, output_folder)
